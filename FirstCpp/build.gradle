plugins {
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
    id "edu.wpi.first.GradleVsCode" version "0.4.1"
}

import jaci.gradle.nativedeps.CombinedNativeLib
import jaci.gradle.nativedeps.NativeLib

repositories{
    maven {url "${System.getProperty('user.home')}/releases/maven/release/"}
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        artifact('frcCpp', edu.wpi.first.gradlerio.frc.FRCNativeArtifact) {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

model {
    libraries {
        all{
            targetPlatform = 'roborio'
        }
        
        // coreLib(NativeLib) {
        //     libraryName = 'coreLib'
        //     staticMatchers << '**/*.a'                      // Static Libraries to be linked at compile time
            
        //     maven = "com.ctre.phoenix:core:5.8.0:linuxathena@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        // }
        coreHeaders(NativeLib) {
            libraryName = 'coreHeaders'
            headerDirs << ''
            maven = "com.ctre.phoenix:core:5.8.0:headers@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        }

        cciLib(NativeLib) {
            libraryName = 'cciLib'
            staticMatchers << '**/*.a'                      // Static Libraries to be linked at compile time
            systemLibs << 'pthread'                               // System libs to load with -l (provided by toolchain)
            
            maven = "com.ctre.phoenix:cci:5.8.0:linuxathena@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        }
        cciHeaders(NativeLib) {
            libraryName = 'cciHeaders'
            headerDirs << ''
            maven = "com.ctre.phoenix:cci:5.8.0:headers@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        }

        apiLib(NativeLib) {
            libraryName = 'apiLib'
            staticMatchers << '**/*.a'                      // Static Libraries to be linked at compile time
            
            maven = "com.ctre.phoenix:api-cpp:5.8.0:linuxathena@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        }
        apiHeaders(NativeLib) {
            libraryName = 'apiHeaders'
            headerDirs << ''
            maven = "com.ctre.phoenix:api-cpp:5.8.0:headers@zip"    // Load from maven. Must be a zip or zip-compatible (like a jar)
        }

        ctrePhoenix(CombinedNativeLib){
            libraryName = 'ctrePhoenix'
            //libs << 'coreHeaders' << 'coreLib' << 'cciHeaders' << 'cciLib' << 'apiHeaders' << 'apiLib'
            libs << 'apiHeaders' << 'apiLib' << 'cciHeaders' << 'cciLib' << 'coreHeaders'// << 'coreLib'
        }
    }

    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform 'roborio'

            // -g is the debug information flag. You should leave this here, unless
            // you have good reason to remove it.
            binaries.all {
                cppCompiler.args('-g')
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
            // and NavX.
            useLibrary(it, "wpilib", "navx", "ctrePhoenix")
        }
    }
}

wrapper {
    gradleVersion = '4.9'
}
